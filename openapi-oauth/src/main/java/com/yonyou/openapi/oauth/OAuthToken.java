// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `OAuth.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.yonyou.openapi.oauth;

public class OAuthToken implements Cloneable, java.io.Serializable
{
    private String accessToken;

    private String tokenType;

    private int expiresIn;

    private String refreshToken;

    private String scope;

    public OAuthToken()
    {
        accessToken = "";
        tokenType = "";
        refreshToken = "";
        scope = "";
    }

    public OAuthToken(String accessToken, String tokenType, int expiresIn, String refreshToken, String scope)
    {
        this.accessToken = accessToken;
        this.tokenType = tokenType;
        this.expiresIn = expiresIn;
        this.refreshToken = refreshToken;
        this.scope = scope;
    }

    public boolean
    equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        OAuthToken _r = null;
        if(rhs instanceof OAuthToken)
        {
            _r = (OAuthToken)rhs;
        }

        if(_r != null)
        {
            if(accessToken != _r.accessToken)
            {
                if(accessToken == null || _r.accessToken == null || !accessToken.equals(_r.accessToken))
                {
                    return false;
                }
            }
            if(tokenType != _r.tokenType)
            {
                if(tokenType == null || _r.tokenType == null || !tokenType.equals(_r.tokenType))
                {
                    return false;
                }
            }
            if(expiresIn != _r.expiresIn)
            {
                return false;
            }
            if(refreshToken != _r.refreshToken)
            {
                if(refreshToken == null || _r.refreshToken == null || !refreshToken.equals(_r.refreshToken))
                {
                    return false;
                }
            }
            if(scope != _r.scope)
            {
                if(scope == null || _r.scope == null || !scope.equals(_r.scope))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::oauth::OAuthToken");
        __h = IceInternal.HashUtil.hashAdd(__h, accessToken);
        __h = IceInternal.HashUtil.hashAdd(__h, tokenType);
        __h = IceInternal.HashUtil.hashAdd(__h, expiresIn);
        __h = IceInternal.HashUtil.hashAdd(__h, refreshToken);
        __h = IceInternal.HashUtil.hashAdd(__h, scope);
        return __h;
    }

    public OAuthToken
    clone()
    {
        OAuthToken c = null;
        try
        {
            c = (OAuthToken)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(accessToken);
        __os.writeString(tokenType);
        __os.writeInt(expiresIn);
        __os.writeString(refreshToken);
        __os.writeString(scope);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        accessToken = __is.readString();
        tokenType = __is.readString();
        expiresIn = __is.readInt();
        refreshToken = __is.readString();
        scope = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, OAuthToken __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public OAuthToken
    __read(IceInternal.BasicStream __is, OAuthToken __v)
    {
        if(__v == null)
        {
             __v = new OAuthToken();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final OAuthToken __nullMarshalValue = new OAuthToken();

    public static final long serialVersionUID = -1228570592L;

    public String getAccessToken() {
        return accessToken;
    }

    public void setAccessToken(String accessToken) {
        this.accessToken = accessToken;
    }

    public String getTokenType() {
        return tokenType;
    }

    public void setTokenType(String tokenType) {
        this.tokenType = tokenType;
    }

    public int getExpiresIn() {
        return expiresIn;
    }

    public void setExpiresIn(int expiresIn) {
        this.expiresIn = expiresIn;
    }

    public String getRefreshToken() {
        return refreshToken;
    }

    public void setRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
    }

    public String getScope() {
        return scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }
}
