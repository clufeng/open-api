// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `OAuth.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.yonyou.openapi.oauth;

public final class OAuthServicePrxHelper extends Ice.ObjectPrxHelperBase implements OAuthServicePrx
{
    private static final String __authorize_name = "authorize";

    public OAuthToken authorize(OAuthUrl url)
        throws OAuthException
    {
        return authorize(url, null, false);
    }

    public OAuthToken authorize(OAuthUrl url, java.util.Map<String, String> __ctx)
        throws OAuthException
    {
        return authorize(url, __ctx, true);
    }

    private OAuthToken authorize(OAuthUrl url, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws OAuthException
    {
        __checkTwowayOnly(__authorize_name);
        return end_authorize(begin_authorize(url, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url)
    {
        return begin_authorize(url, null, false, false, null);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, java.util.Map<String, String> __ctx)
    {
        return begin_authorize(url, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, Ice.Callback __cb)
    {
        return begin_authorize(url, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_authorize(url, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, Callback_OAuthService_authorize __cb)
    {
        return begin_authorize(url, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, java.util.Map<String, String> __ctx, Callback_OAuthService_authorize __cb)
    {
        return begin_authorize(url, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, 
                                           IceInternal.Functional_GenericCallback1<OAuthToken> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_authorize(url, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, 
                                           IceInternal.Functional_GenericCallback1<OAuthToken> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_authorize(url, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<OAuthToken> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_authorize(url, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_authorize(OAuthUrl url, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<OAuthToken> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_authorize(url, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_authorize(OAuthUrl url, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<OAuthToken> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_authorize(url, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1UE<OAuthToken>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           OAuthServicePrxHelper.__authorize_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_authorize(OAuthUrl url, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__authorize_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__authorize_name, __cb);
        try
        {
            __result.prepare(__authorize_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            OAuthUrl.__write(__os, url);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public OAuthToken end_authorize(Ice.AsyncResult __iresult)
        throws OAuthException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __authorize_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(OAuthException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            OAuthToken __ret = null;
            __ret = OAuthToken.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __authorize_completed(Ice.TwowayCallbackArg1UE<OAuthToken> __cb, Ice.AsyncResult __result)
    {
        OAuthServicePrx __proxy = (OAuthServicePrx)__result.getProxy();
        OAuthToken __ret = null;
        try
        {
            __ret = __proxy.end_authorize(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __createCode_name = "createCode";

    public String createCode(OAuthUrl url)
        throws OAuthException
    {
        return createCode(url, null, false);
    }

    public String createCode(OAuthUrl url, java.util.Map<String, String> __ctx)
        throws OAuthException
    {
        return createCode(url, __ctx, true);
    }

    private String createCode(OAuthUrl url, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws OAuthException
    {
        __checkTwowayOnly(__createCode_name);
        return end_createCode(begin_createCode(url, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url)
    {
        return begin_createCode(url, null, false, false, null);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, java.util.Map<String, String> __ctx)
    {
        return begin_createCode(url, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, Ice.Callback __cb)
    {
        return begin_createCode(url, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createCode(url, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, Callback_OAuthService_createCode __cb)
    {
        return begin_createCode(url, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, java.util.Map<String, String> __ctx, Callback_OAuthService_createCode __cb)
    {
        return begin_createCode(url, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createCode(url, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createCode(url, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createCode(url, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createCode(OAuthUrl url, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createCode(url, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createCode(OAuthUrl url, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createCode(url, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1UE<String>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            OAuthServicePrxHelper.__createCode_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_createCode(OAuthUrl url, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createCode_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createCode_name, __cb);
        try
        {
            __result.prepare(__createCode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            OAuthUrl.__write(__os, url);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_createCode(Ice.AsyncResult __iresult)
        throws OAuthException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createCode_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(OAuthException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createCode_completed(Ice.TwowayCallbackArg1UE<String> __cb, Ice.AsyncResult __result)
    {
        OAuthServicePrx __proxy = (OAuthServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_createCode(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __validateToken_name = "validateToken";

    public void validateToken(String accessToken)
        throws OAuthException
    {
        validateToken(accessToken, null, false);
    }

    public void validateToken(String accessToken, java.util.Map<String, String> __ctx)
        throws OAuthException
    {
        validateToken(accessToken, __ctx, true);
    }

    private void validateToken(String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws OAuthException
    {
        __checkTwowayOnly(__validateToken_name);
        end_validateToken(begin_validateToken(accessToken, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_validateToken(String accessToken)
    {
        return begin_validateToken(accessToken, null, false, false, null);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, java.util.Map<String, String> __ctx)
    {
        return begin_validateToken(accessToken, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, Ice.Callback __cb)
    {
        return begin_validateToken(accessToken, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_validateToken(accessToken, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, Callback_OAuthService_validateToken __cb)
    {
        return begin_validateToken(accessToken, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, java.util.Map<String, String> __ctx, Callback_OAuthService_validateToken __cb)
    {
        return begin_validateToken(accessToken, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_validateToken(accessToken, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_validateToken(accessToken, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_validateToken(accessToken, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_validateToken(String accessToken, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_validateToken(accessToken, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_validateToken(String accessToken, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_validateToken(accessToken, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               OAuthServicePrxHelper.__validateToken_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_validateToken(String accessToken, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__validateToken_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__validateToken_name, __cb);
        try
        {
            __result.prepare(__validateToken_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(accessToken);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_validateToken(Ice.AsyncResult __iresult)
        throws OAuthException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __validateToken_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(OAuthException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __validateToken_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        OAuthServicePrx __proxy = (OAuthServicePrx)__result.getProxy();
        try
        {
            __proxy.end_validateToken(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    public static OAuthServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), OAuthServicePrx.class, OAuthServicePrxHelper.class);
    }

    public static OAuthServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), OAuthServicePrx.class, OAuthServicePrxHelper.class);
    }

    public static OAuthServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), OAuthServicePrx.class, OAuthServicePrxHelper.class);
    }

    public static OAuthServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), OAuthServicePrx.class, OAuthServicePrxHelper.class);
    }

    public static OAuthServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, OAuthServicePrx.class, OAuthServicePrxHelper.class);
    }

    public static OAuthServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, OAuthServicePrx.class, OAuthServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::oauth::OAuthService"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, OAuthServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static OAuthServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            OAuthServicePrxHelper result = new OAuthServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
