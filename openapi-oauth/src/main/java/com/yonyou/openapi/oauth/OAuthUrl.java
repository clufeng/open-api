// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `OAuth.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.yonyou.openapi.oauth;

public class OAuthUrl implements Cloneable, java.io.Serializable
{
    private String scheme;

    private String host;

    private String method;

    private String uri;

    private String responseType;

    private String grantType;

    private String clientId;

    private String clientSecret;

    private String redirectUri;

    private String state;

    private String forceLogin;

    private String code;

    private String scope;

    private String accessToken;

    public OAuthUrl()
    {
        scheme = "";
        host = "";
        method = "";
        uri = "";
        responseType = "";
        grantType = "";
        clientId = "";
        clientSecret = "";
        redirectUri = "";
        state = "";
        forceLogin = "";
        code = "";
        scope = "";
        accessToken = "";
    }

    public OAuthUrl(String scheme, String host, String method, String uri, String responseType, String grantType, String clientId, String clientSecret, String redirectUri, String state, String forceLogin, String code, String scope, String accessToken)
    {
        this.scheme = scheme;
        this.host = host;
        this.method = method;
        this.uri = uri;
        this.responseType = responseType;
        this.grantType = grantType;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.redirectUri = redirectUri;
        this.state = state;
        this.forceLogin = forceLogin;
        this.code = code;
        this.scope = scope;
        this.accessToken = accessToken;
    }

    public boolean
    equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        OAuthUrl _r = null;
        if(rhs instanceof OAuthUrl)
        {
            _r = (OAuthUrl)rhs;
        }

        if(_r != null)
        {
            if(scheme != _r.scheme)
            {
                if(scheme == null || _r.scheme == null || !scheme.equals(_r.scheme))
                {
                    return false;
                }
            }
            if(host != _r.host)
            {
                if(host == null || _r.host == null || !host.equals(_r.host))
                {
                    return false;
                }
            }
            if(method != _r.method)
            {
                if(method == null || _r.method == null || !method.equals(_r.method))
                {
                    return false;
                }
            }
            if(uri != _r.uri)
            {
                if(uri == null || _r.uri == null || !uri.equals(_r.uri))
                {
                    return false;
                }
            }
            if(responseType != _r.responseType)
            {
                if(responseType == null || _r.responseType == null || !responseType.equals(_r.responseType))
                {
                    return false;
                }
            }
            if(grantType != _r.grantType)
            {
                if(grantType == null || _r.grantType == null || !grantType.equals(_r.grantType))
                {
                    return false;
                }
            }
            if(clientId != _r.clientId)
            {
                if(clientId == null || _r.clientId == null || !clientId.equals(_r.clientId))
                {
                    return false;
                }
            }
            if(clientSecret != _r.clientSecret)
            {
                if(clientSecret == null || _r.clientSecret == null || !clientSecret.equals(_r.clientSecret))
                {
                    return false;
                }
            }
            if(redirectUri != _r.redirectUri)
            {
                if(redirectUri == null || _r.redirectUri == null || !redirectUri.equals(_r.redirectUri))
                {
                    return false;
                }
            }
            if(state != _r.state)
            {
                if(state == null || _r.state == null || !state.equals(_r.state))
                {
                    return false;
                }
            }
            if(forceLogin != _r.forceLogin)
            {
                if(forceLogin == null || _r.forceLogin == null || !forceLogin.equals(_r.forceLogin))
                {
                    return false;
                }
            }
            if(code != _r.code)
            {
                if(code == null || _r.code == null || !code.equals(_r.code))
                {
                    return false;
                }
            }
            if(scope != _r.scope)
            {
                if(scope == null || _r.scope == null || !scope.equals(_r.scope))
                {
                    return false;
                }
            }
            if(accessToken != _r.accessToken)
            {
                if(accessToken == null || _r.accessToken == null || !accessToken.equals(_r.accessToken))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::oauth::OAuthUrl");
        __h = IceInternal.HashUtil.hashAdd(__h, scheme);
        __h = IceInternal.HashUtil.hashAdd(__h, host);
        __h = IceInternal.HashUtil.hashAdd(__h, method);
        __h = IceInternal.HashUtil.hashAdd(__h, uri);
        __h = IceInternal.HashUtil.hashAdd(__h, responseType);
        __h = IceInternal.HashUtil.hashAdd(__h, grantType);
        __h = IceInternal.HashUtil.hashAdd(__h, clientId);
        __h = IceInternal.HashUtil.hashAdd(__h, clientSecret);
        __h = IceInternal.HashUtil.hashAdd(__h, redirectUri);
        __h = IceInternal.HashUtil.hashAdd(__h, state);
        __h = IceInternal.HashUtil.hashAdd(__h, forceLogin);
        __h = IceInternal.HashUtil.hashAdd(__h, code);
        __h = IceInternal.HashUtil.hashAdd(__h, scope);
        __h = IceInternal.HashUtil.hashAdd(__h, accessToken);
        return __h;
    }

    public OAuthUrl
    clone()
    {
        OAuthUrl c = null;
        try
        {
            c = (OAuthUrl)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(scheme);
        __os.writeString(host);
        __os.writeString(method);
        __os.writeString(uri);
        __os.writeString(responseType);
        __os.writeString(grantType);
        __os.writeString(clientId);
        __os.writeString(clientSecret);
        __os.writeString(redirectUri);
        __os.writeString(state);
        __os.writeString(forceLogin);
        __os.writeString(code);
        __os.writeString(scope);
        __os.writeString(accessToken);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        scheme = __is.readString();
        host = __is.readString();
        method = __is.readString();
        uri = __is.readString();
        responseType = __is.readString();
        grantType = __is.readString();
        clientId = __is.readString();
        clientSecret = __is.readString();
        redirectUri = __is.readString();
        state = __is.readString();
        forceLogin = __is.readString();
        code = __is.readString();
        scope = __is.readString();
        accessToken = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, OAuthUrl __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public OAuthUrl
    __read(IceInternal.BasicStream __is, OAuthUrl __v)
    {
        if(__v == null)
        {
             __v = new OAuthUrl();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final OAuthUrl __nullMarshalValue = new OAuthUrl();

    public static final long serialVersionUID = -1060474409L;

    public String getScheme() {
        return scheme;
    }

    public void setScheme(String scheme) {
        this.scheme = scheme;
    }

    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public String getMethod() {
        return method;
    }

    public void setMethod(String method) {
        this.method = method;
    }

    public String getUri() {
        return uri;
    }

    public void setUri(String uri) {
        this.uri = uri;
    }

    public String getResponseType() {
        return responseType;
    }

    public void setResponseType(String responseType) {
        this.responseType = responseType;
    }

    public String getGrantType() {
        return grantType;
    }

    public void setGrantType(String grantType) {
        this.grantType = grantType;
    }

    public String getClientId() {
        return clientId;
    }

    public void setClientId(String clientId) {
        this.clientId = clientId;
    }

    public String getClientSecret() {
        return clientSecret;
    }

    public void setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
    }

    public String getRedirectUri() {
        return redirectUri;
    }

    public void setRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getForceLogin() {
        return forceLogin;
    }

    public void setForceLogin(String forceLogin) {
        this.forceLogin = forceLogin;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getScope() {
        return scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }

    public String getAccessToken() {
        return accessToken;
    }

    public void setAccessToken(String accessToken) {
        this.accessToken = accessToken;
    }
}
